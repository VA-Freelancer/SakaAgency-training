// Font styles

@mixin font-source-sans(
  $size: false,
  $colour: false,
  $weight: false,
  $lh: false
) {
  font-family: "Panton", var(--font-family-sans-serif);
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}
@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($path + ".eot");
    src: url($path + ".eot?#iefix") format("embedded-opentype"),
      url($path + ".woff") format("woff"), url($path + ".woff2") format("woff2"),
      url($path + ".ttf") format("truetype"),
      url($path + ".svg##{$font-name}") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}
// –∞–¥–∞–ø—Ç–∏–≤
$maxWidth: 1980;
$maxWidthContainer: 1170;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    //–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} *
          ((100vw - 320px) / #{$maxWidthContainer - 320})
      );
    }
  } @else if $type==2 {
    //–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    //–í—Å–µ–≥–¥–∞
    #{$property}: calc(
      #{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
// clearfix
// –ø—Ä–∏–º–µ—Ä: @include cfx;
@mixin cfx {
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }

  * html & {
    height: 1px;
  }
}

// —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
// –ø—Ä–∏–º–µ—Ä: @include push--auto;
@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin min-size($height, $width: $height ) {
  min-height: $height;
  min-width: $width;
}
// –ü—Å–µ–≤–¥–æ, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ::before –∏ ::after
// –ø—Ä–∏–º–µ—Ä: @include pseudo(inline-block,relative,'next');
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

// –û—Ç–∑—ã–≤—á–∏–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ. –î–∞–Ω–Ω—ã–π –º–∏–∫—Å–∏–Ω –Ω—É–∂–µ–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–º —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏
// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∏–∂–µ –∏ –≤–∞—à –±–ª–æ–∫ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–∏–¥–µ–æ.
// –ü—Ä–∏–º–µ—Ä: @include responsive-ratio(16,9);
@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}
// Saving two lines again üòÑ this time to add a cover background to an element
@mixin cover-bg {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}
// —É—Å–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ç–µ–≥–∞–º —Ç–∏–ø–∞ "span" "p" –∏ —Ç.–¥.
// –ø—Ä–∏–º–µ—Ä: @include truncate(110px);
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è placeholder
// –ø—Ä–∏–º–µ—Ä: @include place($red);
@mixin place($cl) {
  &::-webkit-input-placeholder {
    color: $cl;
  }

  &::-moz-placeholder {
    color: $cl;
  }

  &:-moz-placeholder {
    color: $cl;
  }

  &:-ms-input-placeholder {
    color: $cl;
  }
}

// –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è inline –±–ª–æ–∫–∞
// –ø—Ä–∏–º–µ—Ä: @include justify;
@mixin justify {
  text-align: justify;
  line-height: 0;
  font-size: 0;
  text-justify: newspaper;
  zoom: 1;
  text-align-last: justify;

  &:after {
    content: "";
    display: inline-block;
    width: 100%;
    height: 0;
    visibility: hidden;
    overflow: hidden;
  }
}

// –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è inline –±–ª–æ–∫–∞
// –ø—Ä–∏–º–µ—Ä: @include vertical;
@mixin vertical {
  text-align: center;
  font-size: 0;

  &:before {
    content: "";
    display: inline-block;
    vertical-align: middle;
    width: 0;
    height: 100%;
  }
}

// —Ç–µ–Ω—å –±–ª–æ–∫–∞
// –ø—Ä–∏–º–µ—Ä: @include bsh(1px,1px,3px,0,$gray,inset);
@mixin bsh($top, $left, $blur, $size, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $size $color;
    -moz-box-shadow: inset $top $left $blur $size $color;
    box-shadow: inset $top $left $blur $size $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $size $color;
    -moz-box-shadow: $top $left $blur $size $color;
    box-shadow: $top $left $blur $size $color;
  }
}

// —Ç–µ–Ω—å —Ç–µ–∫—Å—Ç–∞
// –ø—Ä–∏–º–µ—Ä: @include ts(1px,1px,3px,$red);
@mixin ts($x, $y, $blur, $color) {
  text-shadow: $x $y $blur $color;
}

// —Ç–µ–Ω—å —Ç–µ–∫—Å—Ç–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
// –ø—Ä–∏–º–µ—Ä: @include text-shadow(1px 1px 1px $red, 2px 2px 2px $green);
@mixin text-shadow($shadows...) {
  text-shadow: $shadows;
}

// —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
// –ø—Ä–∏–º–µ—Ä: @include transit(color,.2s,ease-in-out);
@mixin transit($what: all, $when: 0.25s, $how: ease) {
  -webkit-transition: $what $when $how;
  -moz-transition: $what $when $how;
  -ms-transition: $what $when $how;
  -o-transition: $what $when $how;
  transition: $what $when $how;
}

// –∫–Ω–æ–ø–∫–∞ color
// –ø—Ä–∏–º–µ—Ä @include btn;
// @mixin btn {
//   display: inline-block;
//   border: 1px solid black;
//   color: black;
//   cursor: pointer;
//   outline: none;
//   width: 100%;
//   text-align: center;
//   text-decoration: none;
//   padding: 6px 10px;
//   @include br(5px);
//   @include ts(0,0,0,black);
//   @include grad-l(gray, aqua);

//   &:hover {
//     @include grad-l(aqua, gray);
//   }
// }

// —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ
// –ø—Ä–∏–º–µ—Ä: @include br(3px);
@mixin br($rad) {
  -webkit-border-radius: $rad;
  -moz-border-radius: $rad;
  -ms-border-radius: $rad;
  border-radius: $rad;
}

// –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π —É–≥–æ–ª
// –ø—Ä–∏–º–µ—Ä: @include br-c(10px,0,10px,0);
@mixin br-c($p1, $p2, $p3, $p4) {
  -webkit-border-radius: $p1 $p2 $p3 $p4;
  -moz-border-radius: $p1 $p2 $p3 $p4;
  -ms-border-radius: $p1 $p2 $p3 $p4;
  border-radius: $p1 $p2 $p3 $p4;
}

// –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Å —Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
// –ø—Ä–∏–º–µ—Ä: @include round(60px,4px);
@mixin round($w: 80px, $bd: 3px) {
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  @include br($w/2);
  height: $w;
  width: $w;
  border-width: $bd;
  border-style: solid;
  border-color: #464a4c;
}

// –≥—Ä–∞–¥–∏–µ–Ω—Ç –ª–∏–Ω–µ–π–Ω—ã–π
// –ø—Ä–∏–º–µ—Ä: @include grad-l($red,$black);
@mixin grad-l($direction, $color-stops) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(
    legacy-direction($direction),
    $color-stops
  );
  background: linear-gradient($direction, $color-stops);
}

// –ë—ç–∫–≥—Ä–∞—É–Ω–¥ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞.
// –ø—Ä–∏–º–µ—Ä: @include cover-background("../img/main.jpg", top, center, scroll);
@mixin cover-background(
  $img-uri,
  $background-top: "center",
  $background-left: "center",
  $background-attachment: "fixed"
) {
  background: url($img-uri) no-repeat unquote($background-top)
    unquote($background-left) unquote($background-attachment);
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}

// –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
// –ø—Ä–∏–º–µ—Ä: @include sep-h(80%,2px,blue);
@mixin sep-h($w, $h, $color) {
  &:after {
    content: "";
    display: block;
    height: $h;
    width: $w;
    margin: 0 auto;
    background-color: $color;
  }
}

// –°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
// –ø—Ä–∏–º–µ—Ä: @include rul;
@mixin rul {
  margin: 0;
  padding: 0;
  list-style: none;
}

// –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å—Å—ã–ª–∫—É
// –ø—Ä–∏–º–µ—Ä: @include hov-a(none,$red);
@mixin hov-a($under: none, $color: #002aff) {
  &:focus,
  &:hover {
    text-decoration: $under;
    color: $color;
  }
}

// —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
// –ø—Ä–∏–º–µ—Ä: @include hov1;
@mixin hov1 {
  &:hover {
    opacity: 0.8;
  }
}
@mixin hov2($transition: 0.2s, $opacity: 0.8, $color: rgba(0, 0, 0, 0.5)) {
  transition: all 0.2s ease-out;

  &:hover {
    opacity: $opacity;
    box-shadow: 0 0 5px 1px $color;
    transition: all 0.2s ease-out;
  }
}

// input style custom
// –ø—Ä–∏–º–µ—Ä: @include input($green,$black,$black,.5s);
@mixin input(
  $bsh: transparentize(blue, 0.3),
  $bdc: gray,
  $pl: gray,
  $timetransit: 0.15s
) {
  display: block;
  width: 100%;
  height: 34px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  color: #555;
  background-color: #fff;
  background-image: none;
  border: 1px solid $bdc;
  border-radius: 4px;
  -webkit-box-shadow: inset 0 0 1px $bdc;
  box-shadow: inset 0 0 1px $bdc;
  -webkit-transition: border-color ease-in-out $timetransit,
    -webkit-box-shadow ease-in-out $timetransit;
  -o-transition: border-color ease-in-out $timetransit,
    box-shadow ease-in-out $timetransit;
  transition: border-color ease-in-out $timetransit,
    box-shadow ease-in-out $timetransit;

  &:focus {
    border-color: $bsh;
    outline: 0;
    -webkit-box-shadow: inset 0 0 1px $bdc, 0 0 8px $bsh;
    box-shadow: inset 0 0 1px $bdc, 0 0 8px $bsh;
  }

  &::-moz-placeholder {
    color: $pl;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    color: $pl;
  }

  &::-webkit-input-placeholder {
    color: $pl;
  }

  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }
}

// —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Å–∏
/* –ø—Ä–∏–º–µ—Ä—ã:
	body{
		color: color(blue, normal,.8);
	}
	p{
		color: color(orange);
	}
	blockquote{
		color: color(blue);
		background: color(orange, pale,.4);
		border-color: color(orange, dark);
	}
*/
// color-stack –ª—É—á—à–µ –≤ —Ñ–∞–∞–π–ª _vars.scss
$color-stack: (
    group: orange,
    id: normal,
    color: #e67835,
  ),
  (
    group: orange,
    id: pale,
    color: #f8a878,
  ),
  (
    group: orange,
    id: dark,
    color: #ad490c,
  ),
  (
    group: blue,
    id: normal,
    color: #426682,
  );
@function color($group, $shade: normal, $transparency: 1) {
  @each $color in $color-stack {
    $c-group: map-get($color, group);
    $c-shade: map-get($color, id);
    @if $group == map-get($color, group) and $shade == map-get($color, id) {
      @return rgba(map-get($color, color), $transparency);
    }
  }
}
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin text-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}
@mixin flex-center {
  @include flexbox();
  align-items: center;
  justify-content: center;
}
@mixin flex-column {
  @include flexbox();
  flex-direction: column;
}
@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}
@mixin flex-center-vert {
  @include flexbox();
  align-items: center;
}
@mixin flex-center-horiz {
  @include flexbox();
}
@mixin flex-center-vert-horiz {
  @include flexbox();
  align-items: center;
  justify-content: center;
}
@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
  // font-size: $font-size * 1px;
  font-size: $font-size * 0.1rem;
  // example using rem values and 62.5% font-size so 1rem = 10px
  @if $line-height==normal {
    line-height: normal;
  } @else {
    line-height: $line-height / $font-size;
  }
  @if $letter-spacing==normal {
    letter-spacing: normal;
  } @else {
    letter-spacing: #{$letter-spacing / $font-size}em;
  }
}
$tablet: 768;
$large: 1024;
$desktop: 1280;
@mixin tablet {
  @media only screen and (min-width: $tablet * 1px) {
    @content;
  }
}
@mixin large {
  @media only screen and (min-width: $large * 1px) {
    @content;
  }
}
@mixin desktop {
  @media only screen and (min-width: $desktop * 1px) {
    @content;
  }
}
@mixin css3-prefix($prop, $value) {
  -webkit-#{$prop}: #{$value};
  -moz-#{$prop}: #{$value};
  -ms-#{$prop}: #{$value};
  -o-#{$prop}: #{$value};
  #{$prop}: #{$value};
}
@mixin vertical-center {
  position: relative;
  top: 50%;
  -ms-transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%);
}
@mixin retina-image($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}
@mixin abs-position($top, $right, $bottom, $left) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
@mixin border-radius-custom($top-left, $top-right, $bottom-right, $bottom-left) {
  @include prefix(border-top-left-radius, $top-left, moz);
  @include prefix(border-top-right-radius, $top-right, moz);
  @include prefix(border-bottom-right-radius, $bottom-right, moz);
  @include prefix(border-bottom-left-radius, $bottom-left, moz);
  // For preventing the background color to spread outside the border. 
  background-clip: padding-box;
}

@mixin border-radius($rad) {
  @include prefix(border-radius, $rad, moz);
  background-clip: padding-box;
}

@mixin border-top-radius($rad) {
  @include prefix(border-top-right-radius, $rad, moz);
  @include prefix(border-top-left-radius, $rad, moz);
  background-clip: padding-box;
}
@mixin border-right-radius($rad) {
  @include prefix(border-bottom-right-radius, $rad, moz);
  @include prefix(border-top-right-radius, $rad, moz);
  background-clip: padding-box;
}

@mixin border-bottom-radius($rad) {
  @include prefix(border-bottom-right-radius, $rad, moz);
  @include prefix(border-bottom-left-radius, $rad, moz);
  background-clip: padding-box;
}
@mixin border-left-radius($rad) {
  @include prefix(border-bottom-left-radius, $rad, moz);
  @include prefix(border-top-left-radius, $rad, moz);
  background-clip: padding-box;
}
@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  } @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}
@mixin breakpoint($point) {
  @if $point == large {
    @media only screen and (min-width: 1366px) {
      @content;
    }
  } @else if $point == desktop {
    @media only screen and (min-width: 1024px) {
      @content;
    }
  } @else if $point == tablet {
    @media only screen and (min-width: 600px) {
      @content;
    }
  }
}
/*-------------------------
## Transforms
---------------------------*/

@mixin transform($params) {
  @include prefix(transform, $params, webkit moz ms o);
}

@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

@mixin perspective($perspective) {
  @include prefix(perspective, $perspective, webkit moz ms);
  @include prefix(transform-style, preserve-3d, webkit moz ms);
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin scale($size) {
  @include transform(scale(#{$size}));
}

@mixin skewX($deg) {
  @include transform(skewX(#{$deg}deg));
}

@mixin skewY($deg) {
  @include transform(skewY(#{$deg}deg));
}
/*-------------------------
## Animations
---------------------------*/

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }  
  @-ms-keyframes $animation-name {
    @content;
  }
  @-o-keyframes $animation-name {
    @content;
  }  
  @keyframes $animation-name {
    @content;
  }
}

@mixin animation($animation-params) {
  @include prefix(animation, #{$animation-params}, webkit moz);
}

@mixin animation-delay($delay) {
  @include prefix(animation-delay, $delay, webkit moz);
}

@mixin animation-duration($duration) {
  @include prefix(animation-duration, $duration, webkit moz);
}

@mixin animation-direction($direction) {
  @include prefix(animation-direction, $direction, webkit moz);
}

@mixin animation-iteration-count($iterations) {
  @include prefix(animation-iteration-count, $iterations, webkit moz);
}

@mixin animation-timing-function($duration) {
  @include prefix(animation-timing-function, $duration, webkit moz);
}
/*-------------------------
## Transitions
---------------------------*/

@mixin transition($params) {
  @include prefix(transition, #{$params}, webkit moz);
}

@mixin transition-delay($delay) {
  @include prefix(transition-delay, $delay, webkit moz);
}

@mixin transition-duration($duration) {
  @include prefix(transition-duration, $duration, webkit moz);
}

@mixin transition-property($property) {
  @include prefix(transition-property, $property, webkit moz);
}

@mixin transition-timing-function($duration) {
  @include prefix(transition-timing-function, $duration, webkit moz);
}

// –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ

@mixin —Åentering-xy() { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); } 
@mixin —Åentering-x() { position: absolute; left: 50%; transform: translateX(-50%); } 
@mixin —Åentering-y() { position: absolute; top: 50%; transform: translateY(-50%); }

